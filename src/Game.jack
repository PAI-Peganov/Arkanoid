class Game
{
    field int _levelId;
    field Level _currentLevel;
    field Platform _platform;
    field Ball _ball;
    field boolean _stopLevel;
    field int _score;

    constructor Game new()
    {
        let _levelId = 1;
        let _currentLevel = 0;
        let _platform = 0;
        let _ball = 0;
        let _stopLevel = false;
        let _score = 0;

        return this;
    }

    method void drawScoreboard()
    {
        do Screen.setColor(true);

        do Output.moveCursor(0, 0);
        do Output.printString("Score: ");
        do Output.printInt(_score);

        do Output.moveCursor(0, 15);
        do Output.printString("Level: ");
        do Output.printInt(_levelId);
        
        do Screen.drawLine(100, 0, 100, 14);
        do Screen.drawLine(0, 14, 511, 14);

        return;
    }

    method void addPoints(int amount)
    {
        let _score = _score + amount;
        do drawScoreboard();
        return;
    }

    method void run()
    {
        while (true)
        {
            let _stopLevel = false;
            do Screen.clearScreen();
            do _loadLevel();
            do drawScoreboard();
            do _runLevel();
            if (_levelId = 0)
            {
                do Main.waitForInput("GAME OVER");
            }
        }
        return;
    }

    method void _loadLevel()
    {
        if (~(_currentLevel = 0)) { do _currentLevel.dispose(); }

        if (~(_platform = 0)) { do _platform.dispose(); }
        if (~(_ball = 0)) { do _ball.dispose(); }

        let _currentLevel = Levels.getLevel(_levelId);

        let _platform = Platform.new();
        let _ball = Ball.new(0, 256 - 16 - 8 - 10, 1, -1, this);
        do _platform.draw();
        return;
    }

    method void nextLevel()
    {
        let _levelId = _levelId + 1;
        let _stopLevel = true;
        return;
    }

    method void _runLevel()
    {
        var char curKey;

        do _currentLevel.render();
        while (~_stopLevel)
        {
            let curKey = Keyboard.keyPressed();
            if (curKey = 130) { do _platform.move(-2); }
            if (curKey = 132) { do _platform.move(2); }
            if (curKey = 131) { do nextLevel(); }
            if (curKey = 32) { do _ball.unanchor(); }

            do _ball.step(_platform);

            // do Sys.wait(1);
        }

        return;
    }

    method void onLose()
    {
        do _currentLevel.dispose();
        let _levelId = 0;
        let _stopLevel = true;
        return;
    }

    method Level getLevel()
    {
        return _currentLevel;
    }
}