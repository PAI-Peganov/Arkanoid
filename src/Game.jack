class Game
{
    field int _levelId;
    field Level _currentLevel;
    field Platform _platform;
    field Ball _ball;
    field boolean _stopLevel;
    field int _score;
    field int _lives;
    field int _maxLives;
    field boolean _died;
    field int _gameSpeed;

    constructor Game new()
    {
        let _maxLives = 5;
        let _levelId = 1;
        let _currentLevel = 0;
        let _platform = 0;
        let _ball = 0;
        let _stopLevel = false;
        let _score = 0;
        let _lives = 5;
        let _died = false;
        let _gameSpeed = 100;

        return this;
    }

    method void drawScoreboard(boolean updateScore, boolean updateLevel, boolean updateHealth, boolean updateSpeed)
    {
        var int i;
        var String scoreString;
        var String levelString;
        var String speedString;

        if (updateScore)
        {
            let scoreString = "Score: ";
            do Output.moveCursor(0, 0);
            do Output.printString(scoreString);
            do Output.printInt(_score);
            do scoreString.dispose();
        }

        if (updateLevel)
        {
            let levelString = "Level: ";
            do Output.moveCursor(0, 15);
            do Output.printString(levelString);
            do Output.printInt(_levelId);
            do levelString.dispose();
        }

        if (updateSpeed)
        {
            do Screen.setColor(false);
            do Screen.drawRectangle(512 - 250, 0, 512 - 100, 13);

            let speedString = "Game speed: ";
            do Output.moveCursor(0, 30);
            do Output.printString(speedString);
            do Output.printInt(_gameSpeed);
            do speedString.dispose();
        }
        
        do Screen.setColor(true);
        do Screen.drawLine(100, 0, 100, 14);
        do Screen.drawLine(200, 0, 200, 14);
        do Screen.drawLine(0, 14, 511, 14);

        if (updateHealth)
        {
            do Screen.setColor(false);
            do Screen.drawRectangle(512 - 100, 0, 511, 13);

            let i = 0;
            while (i < _lives)
            {
                do drawHeart(512 - ((i + 1) * 16), 0);
                let i = i + 1;
            }
            while (i < _maxLives)
            {
                do drawEmptyHeart(512 - ((i + 1) * 16), 0);
                let i = i + 1;
            }
        }

        return;
    }

    method void drawHeart(int x, int y)
    {
        var Array strArray;

        let strArray = Array.new(7);
        let strArray[0] =   " ## ## ";
        let strArray[1] =   "#######";
        let strArray[2] =   "#######";
        let strArray[3] =   " ##### ";
        let strArray[4] =   "  ###  ";
        let strArray[5] =   "   #   ";

        do Sprite.draw(strArray, x, y, 7, 6, 2);
        do strArray.dispose();
        return;
    }

    method void drawEmptyHeart(int x, int y)
    {
        var Array strArray;

        let strArray = Array.new(7);
        let strArray[0] =   " ## ## ";
        let strArray[1] =   "#  #  #";
        let strArray[2] =   "#     #";
        let strArray[3] =   " #   # ";
        let strArray[4] =   "  # #  ";
        let strArray[5] =   "   #   ";

        do Sprite.draw(strArray, x, y, 7, 6, 2);
        do strArray.dispose();
        return;
    }

    method void addPoints(int amount)
    {
        let _score = _score + amount;
        do drawScoreboard(true, false, false, false);
        return;
    }

    method void _changeGameSpeed(int increment)
    {
        let _gameSpeed = Math.max(Math.min(_gameSpeed + increment, 1500), 1);
        do drawScoreboard(false, false, false, true);
        return;
    }

    method void run()
    {
        while (true)
        {
            let _stopLevel = false;

            do _loadLevel();
            do drawScoreboard(true, true, true, true);
            do _runLevel();
            
            if (_levelId = 0){ do Main.waitForInput("GAME OVER"); }
        }
        return;
    }

    method void _loadLevel()
    {
        if (_died)
        {
            if (~(_platform = 0)) { do _platform.paint(false); }
            if (~(_ball = 0)) { do _ball.paint(false); }
        }

        if (~(_platform = 0)) { do _platform.dispose(); }
        if (~(_ball = 0)) { do _ball.dispose(); }

        if (~_died)
        {
            if (~(_currentLevel = 0)) { do _currentLevel.dispose(); }

            do Screen.clearScreen();
            let _currentLevel = Levels.getLevel(_levelId);
            do _currentLevel.render();
        }

        let _died = false;
        let _platform = Platform.new();
        let _ball = Ball.new(0, 256 - 16 - 8 - 10, 1, -1, this);
        do _platform.paint(true);
        return;
    }

    method void nextLevel()
    {
        let _levelId = _levelId + 1;
        let _stopLevel = true;
        return;
    }

    method void reloadLevel()
    {
        let _stopLevel = true;
        let _died = true;
        return;
    }

    method void _runLevel()
    {
        var char curKey;
        var int gameIteration;

        let gameIteration = 0;
        while (~_stopLevel)
        {
            let curKey = Keyboard.keyPressed();
            let gameIteration = gameIteration + 1;

            if ((curKey = 87) | (curKey = 119)) { do _changeGameSpeed(1); }
            if ((curKey = 83) | (curKey = 115)) { do _changeGameSpeed(-1); }

            if (curKey = 131) { do nextLevel(); }
            if (curKey = 32) { do _ball.unanchor(); }

            if ((gameIteration > _gameSpeed) | (gameIteration = _gameSpeed))
            {
                let gameIteration = 0;
                if (curKey = 130) { do _platform.move(-1); }
                if (curKey = 132) { do _platform.move(1); }

                do _ball.step(_platform);
            }
        }

        return;
    }

    method void onLose()
    {
        let _lives = _lives - 1;
        if (~(_lives = 0))
        {
            do reloadLevel();
            return;
        }

        do _currentLevel.dispose();
        let _levelId = 0;
        let _stopLevel = true;
        do Main.waitForInput("You lost!");
        do Sys.halt();
        return;
    }

    method Level getLevel()
    {
        return _currentLevel;
    }
}